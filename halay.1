.\" Automatically generated by Pandoc 2.18
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "" "" "" "" ""
.hy
Derici, Curriculum Vitae
[IMAGE: Avatar]
.SS Caner Derici
.PP
\f[I]\f[R]Canonical
Ltd. (https://en.wikipedia.org/wiki/Canonical_(company))
.PP
\f[I]\f[R]PhD Candidate, Computer Science
.PP
\f[I]\f[R]Sandy, UT, USA
.PP
\f[I]\f[R]cderici (https://github.com/cderici)
.PP
\f[I]\f[R]<caner.derici@canonical.com>
.PP
\f[I]\f[R] (http://twitch.tv/lambda_cd)
\f[I]\f[R] (https://www.youtube.com/channel/UCQUqjj5SfL9vfJxJ53ygN7w)
\f[I]\f[R] (https://www.facebook.com/caner.derici.3)
\f[I]\f[R] (https://www.instagram.com/caner.derici/)
\f[I]\f[R] (https://tr.linkedin.com/in/caner-derici-0619b0aa)
\f[I]\f[R] (https://twitter.com/canerderici)
.PD 0
.P
.PD
\f[I]\f[R]
Home Professional Building a Community Music Artsy Travel Arch Masters
Tribute Page
.PP
Welcome to the extended version of my resume.
This page contains the details/explanations of what you see in my
resume, as well as a couple of additional projects I did and assessments
of who I am professionally.
Click on a title to see the details.
You\[aq]re more than welcome to send me an
email (mailto:caner.derici@canonical.com) if you\[aq]d like to get more
information.
.SS \f[B]View Resume PDF\f[R]
[TEX SOURCE (https://www.overleaf.com/read/jbsbnxbnjfdd)]
.SS \f[B]Nerdy TL;DR\f[R]
.PP
I\[aq]m a practice oriented computer scientist, and like to get involved
in the details.
I like working in high pace dynamic settings and make stuff happen,
preferably with a good team.
.PP
So far I worked with Racket and Python for many years, mostly written
functional code.
I also have experience in object oriented setups and imperative
languages as well.
I am particularly good in test-driven approaches and debugging in
general.
Currently I\[aq]m coding Python and Go in the
Juju (https://github.com/juju) core team at
Canonical (https://en.wikipedia.org/wiki/Canonical_(company)).
.PP
I prefer collaboration and team work to competition, (good) tea to
(good) coffee, kindness to power.
I equally and unconditionally like all the bi-pedals and poly-pods
alike.
.PP
My undergraduate work was about adding tail-calls to a Racket-to-JS
compiler.
In my masters I studied \f[B]Machine Learning and Natural Language
Processing\f[R]; my work was about developing a question answering
system for high-school students.
Currently (2021) my PhD work is about \f[B]fast run-times for dynamic
languages\f[R].
In particular, I\[aq]m trying to show that rapid prototyping an
efficient run-time for a self-hosting dynamically typed language (e.g.
Racket) is achievable using an automatically generated \f[B]tracing JIT
compiler\f[R] on RPython
framework (https://rpython.readthedocs.io/en/latest/).
You can see the details for all of them below.
[click on a title to see details]
.SS \f[I]\f[R]Education
.SS \f[B]PhD Computer Science - Indiana University, IN, USA\f[R]
.SS \f[I]\f[R]2015 - 2021
.PP
Specializing on Programming Languages (PL) under the supervision of Sam
Tobin-Hochstadt (http://homes.sice.indiana.edu/samth/), minoring in
Logic at the Department of
Philosophy (http://www.philosophy.indiana.edu/areas/ll.shtml).
.PP
I\[aq]m working on fast run-times of dynamically typed languages,
particularly Racket.
When I started, I was initially trying to figure out the effects of
using Racket byte-code compiler as a front-end for Pycket, i.e.
investigating the individual effects of various optimizations happening
in the Racket compiler to the Pycket run-time, such as heavy inlining
and/or lambda lifting.
.PP
While we were working on that, Racket decided to make the language more
portable, and started adopting Chez Scheme as its
run-time (https://blog.racket-lang.org/2018/01/racket-on-chez-status.html).
So I decided to join the fray and took a different direction.
.PP
At that time, we had a rudimentary Racket implementation we were working
on, namely Pycket (https://github.com/pycket/pycket), which is a
meta-tracing JIT compiler automatically generated by the RPython
framework (https://rpython.readthedocs.io/en/latest/), designed to
demonstrate that efficient sound gradual typing is
possible (https://github.com/pycket/pycket/tree/master/papers).
In the new direction of research, I first helped to make the Racket more
portable (see Publications), and helped it to adopt the Chez Scheme
fully (https://blog.racket-lang.org/2019/01/racket-on-chez-status.html).
And then mimicking Racket\[aq]s self-hosting on Racket-on-Chez, I turned
the Pycket into a full implementation of Racket, thereby having a
meta-tracing JIT as a run-time for Racket.
.PP
PyPy (https://pypy.org/) project has shown that fast prototyping of
efficient run-times for dynamic languages is possible through
meta-interpretation (tracing not the user program, but the interpreter
that runs it).
The aim of my research is to take the meta level one step further, and
show that with this setup, fast prototyping efficient run-times for
\f[B]self-hosting\f[R] dynamic languages is also achievable.
.PP
Currently, Pycket (https://github.com/pycket/pycket) is able to run just
as fast as before on the benchmarks in previous
studies (https://github.com/pycket/pycket/tree/master/papers).
However, self-hosting comes with a big problem for tracing JITs; giant
dispatch-loops.
This is essentially the same problem that Mozilla has faced quite a
while ago with
TraceMonkey (https://blog.mozilla.org/nnethercote/category/tracemonkey/),
which is basically that you lose more when slow than you gain when
fast (https://blog.mozilla.org/nnethercote/2011/05/31/you-lose-more-when-slow-than-you-gain-when-fast/).
My work suggests some workarounds for this problem and tries to show
that an efficient run-time with a meta-tracing JIT is still achievable
for fast prototyping self-hosting dynamic languages.
.SS \f[B]PhD Computer Science - Bo\[u011F]azi\[,c]i University, Istanbul, TR\f[R]
.SS \f[I]\f[R]2014 - 2015
.PP
This was the continuation of my masters on \f[B]natural language
processing\f[R] and \f[B]machine learning\f[R].
After researching for another year on the system I built, I decided to
pursue a PhD on \f[B]programming languages\f[R] instead.
.SS \f[B]MSc Computer Engineering - Bo\[u011F]azi\[,c]i University, Istanbul, TR\f[R]
.SS \f[I]\f[R]2011 - 2014
.PP
I was part of the Text Analytics and Bio-Informatics
Lab (http://tabilab.cmpe.boun.edu.tr/).
Studied the \f[B]theory of computation\f[R], \f[B]automated theorem
proving\f[R], then focused on \f[B]machine learning\f[R] and
\f[B]natural language processing\f[R].
Worked on closed domain question answering systems for Turkish
high-school students.
(government funded project)
.PP
   *   *   *   *   *
Thesis title
Question Analysis and Information Retrieval For a Turkish Question
Answering System:Haz\[.i]rCevap ( \f[B]pdf\f[R] )
.PP
   *   *   *   *   *
Supervisors
Tunga G\[:u]ng\[:o]r, Assoc.
Arzucan \[:O]zg\[:u]r, G\[:u]nizi Kartal
.PP
   *   *   *   *   *
Abstract
This study describes and evaluates the techniques we developed for the
question analysis and information retrieval (IR) module of a
closed-domain Turkish factoid Question Answering (QA)system that is
intended for high-school students to support their education.
We propose novel methods for two major problems in question analysis,
namely focus extraction and question classification, based on
integrating a rule-based and a Hidden Markov Model (HMM) based sequence
classification approach, both of which make use of the dependency
relations among the words in the question.
We also built an IR module that searches for the relevant documents and
passages through the combined use of search engines Indri and Apache
Lucene.
.SS \f[B]BSc Computer Science - Istanbul Bilgi University, Istanbul, TR\f[R]
.SS \f[I]\f[R]2005 - 2010
.PP
Got both theoretical and practical experience.
Programmed in both imperative, functional, logic languages.
Concentrated on the \f[B]theory of computation\f[R], and
\f[B]programming languages\f[R], design and implementation.
.PP
   *   *   *   *   *
Thesis title
Proper Tail Calls From First-Class Continuations in JavaScript (
\f[B]pdf\f[R] (https://cderici.github.io/docs/bsc-thesis/caner_thesis.pdf)
|
\f[B]tex\f[R] (https://cderici.github.io/docs/bsc-thesis/thesis.tar.gz)
)
.PP
   *   *   *   *   *
Supervisors
Chris Stephenson, Shriram Krishnamurthi, Alpaslan Parlak\[,c]\[.i],
Matthew Edwards
.PP
   *   *   *   *   *
Abstract
This study demonstrates that a proper tail-calling behavior on
JavaScript is possible while refraining from any modification on
interpreter.
It is based on the paper titled Continuations from Generalized Stack
Inspection, by Pettyjohn et al., in which a novel program transformation
is presented for JavaScript programs to obtain first-class continuations
from exception handling mechanism.
My thesis takes it one step further, showing that by using this
continuation model on JavaScript, achieving a tail-call optimized
computation is possible, without ever touching the interpreter.
.PP
   *   *   *   *   *
[click on a title to see details]
.SS \f[I]\f[R]Experience
.SS \f[B]Software Engineer II\f[R], Canonical Ltd.
.SS \f[I]\f[R]2021 - Present
.PP
Working in the Juju (https://github.com/juju) core team.
Currently (Sep 2021) I\[aq]m helping to develop and maintain
python-libjuju (https://github.com/juju/python-libjuju), a Python
library that allows programmatically interacting with Juju.
In the meantime I\[aq]m learning cloud computing concepts and how cloud
systems are operated, as well as learning how Juju works under the hood.
.SS \f[B]Course Instructor\f[R], Indiana University, IN, USA
.SS \f[I]\f[R]Spring 2021
.PP
Taught Introduction to Computer Science (HtDP Style Functional
Programming) with Racket.
.SS \f[B]TA & RA\f[R], Indiana University, IN, USA
.SS \f[I]\f[R]2015 - 2020
.PP
Taught Advanced Compilers, Introduction to Programming (in Racket), and
the domain specific language design and implementation with Sam
Tobin-Hochstadt (http://homes.sice.indiana.edu/samth/) for 1 semester.
I was a research assistant for Sam for 5 semesters and 4 summers.
.SS \f[B]Product Development Specialist\f[R], Asseco South-Eastern Europe, Istanbul, TR
.SS \f[I]\f[R]2012 - 2013
.PP
Worked on developing the back-end of the virtual point-of-sale
applications between merchants and banks.
Used Java, Spring, Tomcat, Mercurial, Jira.
.SS \f[B]Hackathonist\[cq]14\f[R], Istanbul, TR
.SS \f[I]\f[R]2013
.PP
Developed a Google Glass application (running on a mock glass API) that
talks with the CitySDK, and enables the use of open city data provided
by Istanbul Municipality for various smart city tasks (such as finding a
suitable bus-route).
.SS \f[B]Computer Science RPG\f[R], Istanbul, TR
.SS \f[I]\f[R]2013
.PP
I created an extra-curricular game for students to \[dq]level up\[dq]
their computer science skills.
Each level required learning some concepts and solving some problems in
a constrained way.
I lead a team of undergraduate students as they try to level up.
.SS \f[B]TA\f[R], Istanbul Bilgi University, TR
.SS \f[I]\f[R]2010 - 2013
.PP
Taught 6 semesters; Data Structures & Algorithms (in Java), Principles
of Programming Languages (in Racket), Database Systems (with Data
Mining).
.SS \f[B]Instructor\f[R], Nesin Math Village (http://www.matematikkoyu.org/), \[u015E]irince/Sel\[,c]uk, TR
.SS \f[I]\f[R]2011
.PP
Taught Lambda Calculus to Math graduate students, and
\[lq]Programming=Algebra\[rq] to high-school students with Chris
Stephenson (https://chrisstephenson.org/moodle/?lang=en).
.SS \f[B]Conference Reviewer\f[R], TR
.SS \f[I]\f[R]2014
.PP
Reviewed two papers on statistical information retrieval for SIU2014,
and a paper on question answering systems for COLING 2014.
.SS \f[B]VII. International Conf. on Webometrics, Infometrics and Scientometrics (WIS)\f[R], Istanbul, TR
.SS \f[I]\f[R]2011
.PP
Lead the preparation and compilation of the Book of Abstracts and the
Proceedings.
.PP
   *   *   *   *   *
[click on a title to see details]
.SS \f[I]\f[R]Projects
.SS \f[B]Pycket\f[R]
.SS \f[I]\f[R]2016 - Present
.PP
A meta-tracing JIT initially designed to reduce the overhead of sound
gradual typing, nowadays a run-time for self-hosting full Racket.
I am the main developer and maintainer.
I re-implemented the front-end to make the Racket bootstrap itself on
Pycket, i.e., achieved a full Racket implementation on RPython
framework.
Developed performance debugging tools, implemented various optimizations
and large number of run-time primitives.
Maintained and improved the data structure implementations (hash tables,
vectors, structs etc.).
For details, see my PhD description.
.PP
[https://github.com/pycket/pycket] (https://github.com/pycket/pycket)
.SS \f[B]Rax\f[R]
.SS \f[I]\f[R]2016
.PP
A full-stack nanopass compiler from a small subset of Racket all the way
down to x86_64 assembly.
Started for fun, collaborated with a
friend (https://github.com/RyanGlScott) to turn it into a school
project, then it turned into an open source project.
Built and tested all the passes (e.g.
closure conversion, register allocation, code-gen, etc.).
.PP
[https://github.com/cderici/rax] (https://github.com/cderici/rax)
.SS \f[B]Correctness Proof of a Closure Conversion Pass\f[R]
.SS \f[I]\f[R]2018
.PP
I collaborated with Jeremy
Siek (https://wphomes.soic.indiana.edu/jsiek/) and Matthew
Heimerdinger (https://github.com/madheime) to help prove the correctness
of a closure conversion pass of a compiler for a functional language
represented as denotational semantics in Isabelle.
.PP
[https://github.com/madheime/denotsem-compiler] (https://github.com/madheime/denotsem-compiler)
(might be a private repo)
.SS \f[B]Haz\[.i]rCevap\f[R]
.SS \f[I]\f[R]2013 - 2015
.PP
A closed domain question answering system for high school students.
Funded by TUBITAK (https://www.tubitak.gov.tr/en) (The Scientific and
Technological Research Council of Turkey).
I lead the research and development, 3 faculty members (both from CS and
also School of Education) and 4 grad students were involved.
This was my MSc thesis work, so I worked on pretty much everything about
it (see Publications).
I developed a hybrid model for question analyzing (Hidden Markov Model
along with a rule-based model), developed a reliability score for
web-pages/documents, used the Indri search engine for processing and
retrieval for answer generation, implemented both the front and back-end
in Python.
.SS \f[B]Sessizli\[u011F]e Oku (Read to Silence)\f[R]
.SS \f[I]\f[R]2014
.PP
Did you know that it\[aq]s very hard for Deaf people to read?
Well I didn\[aq]t.
Apparently reading for Deaf people is a sort of learning a new foreign
language.
This is a joint work with the Department of Western Languages &
Literature to build a web-based application to teach people with hearing
disability how to read.
Two faculties from Linguistics, one from CS, and two RAs were involved.
Project aims to develop a stable framework on which the Turkish grammar
lectures and exercises for Deaf people can easily be provided.
I collaborated with the linguists to implement the application
(available on both PC and mobile) that\[cq]s designed specifically for
Deaf people.
Used JavaScript, HTML and PhoneGap.
.SS \f[B]Direnaj: Social Network Data Processing Framework\f[R]
.SS \f[I]\f[R]2013 - 2014
.PP
Data Collection, Processing and Visualization Framework for real-time
social network data, lead by Suzan
\[:U]sk\[:u]darl\[.i] (https://www.cmpe.boun.edu.tr/~uskudarli/).
4 faculty members and 7 grad students were involved.
I developed parts of the processing library with JavaEE, implementing
certain tools used for various kinds of analyses, such as centrality
analysis, stop-word collection, etc.
.PP
[http://direnaj-staging.cmpe.boun.edu.tr/] (http://direnaj-staging.cmpe.boun.edu.tr/)
(might be private because of the Twitter privacy terms)
.SS \f[B]FARS: Functional Automated Reasoning System\f[R]
.SS \f[I]\f[R]2012
.PP
This is a resolution-refutation style automated theorem prover.
I developed it for fun at first, then I turned it into a project for
school.
Written all in Racket by myself.
.PP
[https://github.com/cderici/FARS] (https://github.com/cderici/FARS)
.SS \f[B]Tail call elimination on Racket->JS compiler\f[R]
.SS \f[I]\f[R]2009 - 2010
.PP
This was my undergraduate thesis (see BSc description).
It was a project from Brown University under supervision of Shriram
Krishnamurthi (https://cs.brown.edu/~sk/), a compiler from Racket
Advanced Student Language to JS and HTML.
I participated in the development of both compiler and run-time
libraries.
My major contribution was to add the tail-calls.
Nowadays it is used on WeScheme (https://www.wescheme.org/) by the
Bootstrap curriculum (https://www.bootstrapworld.org/).
.PP
[https://github.com/cderici/moby-scheme] (https://github.com/cderici/moby-scheme)
.PP
   *   *   *   *   *
.SS \f[I]\f[R]Publications
.IP \[bu] 2
\f[I]Rebuilding Racket on Chez Scheme (Experience Report)\f[R] [
PDF (https://cderici.github.io/docs/papers/icfp19-rrocs.pdf) ]
.PD 0
.P
.PD
Supplementary material (https://www.cs.utah.edu/plt/rkt-on-chez)
.PD 0
.P
.PD
Matthew Flatt, Caner Derici, R.
Kent Dybvig, Andy Keep, Gustavo E.
Massaccesi, Sarah Spall, Sam Tobin-Hochstadt, Jon Zeppieri.
ICFP 2019
.IP \[bu] 2
\f[I]A closed-domain question answering framework using reliable
resources to assist students.\f[R] [
PDF (https://cderici.github.io/docs/papers/derici-hazircevap.pdf) ]
.PD 0
.P
.PD
Caner Derici, Yi\[u011F]it Ayd\[.i]n, \[,C]i\[u011F]dem Yenialaca, Nihal
Ya\[u011F]mur Aydin, G\[:u]nizi Kartal, Arzucan \[:O]zg\[:u]r, and Tunga
G\[:u]ng\[:o]r.
Natural Language Engineering 24(5): 725-762 (2018)
.IP \[bu] 2
\f[I]Question analysis for a closed domain question answering system:
Haz\[.i]rcevap.\f[R] [
PDF (https://cderici.github.io/docs/papers/derici2014.pdf) ]
.PD 0
.P
.PD
Caner Derici, Kerem \[,C]elik, Ekrem Kutbay, Yi\[u011F]it Ayd\[.i]n,
Arzucan \[:O]zg\[:u]r, G\[:u]nizi Kartal, and Tunga G\[:u]ng\[:o]r.
CICLING15, Springer Lecture Notes of Computer Science, November 2014.
.IP \[bu] 2
\f[I]Rule-based focus extraction in turkish question answering
systems.\f[R] [
PDF (https://cderici.github.io/docs/papers/derici2014-tr.pdf) ]
.PD 0
.P
.PD
Caner Derici, Kerem \[,C]elik, Ekrem Kutbay, Yi\[u011F]it Ayd\[.i]n,
Arzucan \[:O]zg\[:u]r, G\[:u]nizi Kartal, and Tunga G\[:u]ng\[:o]r.
SIU14 (Signal Processing and Communication Applications Conference),
Trabzon, TR, April 2014.
.IP \[bu] 2
\f[I]Worldwithweb: A compiler from world applications to
JavaScript.\f[R] [
PDF (https://cderici.github.io/docs/papers/worldwithweb.pdf) ]
.PD 0
.P
.PD
Emre Ba\[u015F]ar, Caner Derici, and \[,C]a\[u011F]da\[u015F]
\[u015E]enol.
Scheme and Functional Programming 2009, Boston, August 2009.
.PP
   *   *   *   *   *
.SS \f[I]\f[R]Natural Languages
Turkish
\f[I]\f[R]
\f[I]Native\f[R]
English
\f[I]\f[R]
\f[I]Lived in US since 2015.
All the education was in English.
Wrote 2 dissertations (BSc and MSc) and numerous publications in
English.\f[R]
.PP
   *   *   *   *   *
.SS \f[I]\f[R]Programming Languages
.PP
My PhD is on programming languages, so I feel confident in coding in any
language.
So far I have been using mostly the functional languages (including to
implement new ones), however, I feel confident in a variety of
programming paradigms.
Below are some of the languages I have used.
\f[I]\f[R]s indicate my current (2021) level of confidence in writing
programs in the corresponding language.
.PD 0
.P
.PD
Python
\f[I]\f[R]
\f[I]My current position as a software engineer at Canonical involves a
lot of Python.
Also my entire PhD work (Pycket) is in
RPython (https://rpython.readthedocs.io/en/latest/) (restricted Python).
Also my masters thesis work (information retrieval and natural language
processing) was completely in Python (see Haz\[.i]rCevap project).\f[R]
Racket / Scheme / Lisp
\f[I]\f[R]
\f[I]Programming and teaching in Racket since 2005, used it for both
everyday programming and projects.
(see the sections above)\f[R]
Java
\f[I]\f[R]
\f[I]Worked for a year for a software company that used Java to develop
software (e.g.
virtual point-of-sale) for financial institutions (e.g.
banks).
Correct & clean code as well as security were main focuses.
Also developed toy mobile applications on Android for fun.\f[R]
C/C++
\f[I]\f[R]
\f[I]Made some little games with OpenGL and studied some graphics
programming.
Also developed a mobile application on Samsung\[cq]s (now very dead)
Bada 1.0 platform.\f[R]
JavaScript
\f[I]\f[R]
\f[I]Implemented tail-calls and wrote some run-time support primitives
for the Racket-to-JavaScript compiler being used in
<https://www.wescheme.org/> for the Bootstrap
curriculum (https://www.bootstrapworld.org/).\f[R]
Misc.
\f[I]\f[R]
\f[I]At some point I\[cq]ve written code in; Go for fun, SQL for DB,
Matlab and R for statistical analysis, CSS for the web etc.\f[R]
.PP
   *   *   *   *   *
.SS \f[I]\f[R]Skills
.PP
\f[I]\f[R]s indicate my current (2019) level of confidence.
.PP
\f[B]Professional / Work\f[R]
Clear Code & Testing
\f[I]\f[R]
Keeping track of latest/trending techs
\f[I]\f[R]
Time & Resource Management
\f[I]\f[R]
Team-work & Communication
\f[I]\f[R]
Attention span & Keeping focus
\f[I]\f[R]
Self-motivation
\f[I]\f[R]
Coding fast
\f[I]\f[R]
Testing against dumb mistakes
\f[I]\f[R]
.PP
\f[B]Technical\f[R]
Linux
\f[I]\f[R]
\f[I]Using Linux on my PC everyday since 2005 (except for gaming).\f[R]
Git
\f[I]\f[R]
\f[I]<http://www.github.com/cderici>\f[R]
Latex
\f[I]\f[R]
\f[I]Using since 2005 for all documents, e.g.
my dissertations and papers etc.\f[R]
Emacs
\f[I]\f[R]
\f[I]Not a power user, but I\[cq]ve been using it everyday since
2015.\f[R]
.PP
\f[B]Personal\f[R]
Electric Guitar & Music
\f[I]\f[R]
\f[I]I was a semi-professional musician, played in lots of rock bands
since I was 12, managed music studios for 2 years.
Made a decision to be a computer scientist instead.
Now I make songs only for my wife.
You can watch some of my guitar covers on
YouTube (https://www.youtube.com/channel/UCQUqjj5SfL9vfJxJ53ygN7w).\f[R]
Fantasy Role Playing
\f[I]\f[R]
\f[I]10 years of playing (and dungeon mastering) since my late teens to
mid twenties (mostly D&D 3.5e and AD&D)\f[R]
Tango
\f[I]\f[R]
\f[I]Took lessons for 6 months with my sister.
I was terrible, but I liked it.\f[R]
Starcraft II
\f[I]\f[R]
\f[I]Just (2019) started again after years.
Here is my battle net
profile (https://starcraft2.com/en-us/profile/1/1/7890604/ladders?ladderId=summary).\f[R]
.PP
   *   *   *   *   *
.SS \f[I]\f[R]Scholarships
.IP \[bu] 2
Research Scholarship for MSc (3 years), fully funded by
TUBITAK (https://www.tubitak.gov.tr/en)
.IP \[bu] 2
Scholarship for a research project on teaching natural languages to
hearing impaired.
2014.
Funded by KO\[,C]
Foundation. (https://en.wikipedia.org/wiki/Ko%C3%A7_Holding)
.IP \[bu] 2
Full Scholarship for BSc, 2005-2010, Student Selection and Placement
Center (OSYM (https://www.osym.gov.tr/))
.PP
   *   *   *   *   *
